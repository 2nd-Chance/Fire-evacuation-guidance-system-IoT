#******************************************************************
#
# Copyright 2017 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
##
# Lyric Plugin build script
##

import os
import os.path

Import('env')

target_os = env.get('TARGET_OS')
src_dir = env.get('SRC_DIR')
bridging_path = os.path.join(src_dir, 'bridging')

lyric_env = env.Clone()

print("Reading Lyric Plugin script")


def maskFlags(flags):
    flags = [flags.replace('-Wl,--no-undefined', '') for flags in flags]
    return flags


######################################################################
# Build flags
######################################################################

lyric_env.PrependUnique(CPPPATH=[
    os.path.join(src_dir, 'resource', 'c_common', 'oic_malloc', 'include'),
    os.path.join(src_dir, 'resource', 'c_common', 'oic_string', 'include'),
    os.path.join(src_dir, 'resource', 'c_common'),
    os.path.join(src_dir, 'resource', 'oc_logger', 'include'),
    os.path.join(src_dir, 'resource', 'csdk', 'logger', 'include'),
    os.path.join(src_dir, 'resource', 'csdk', 'include'),
    os.path.join(src_dir, 'resource', 'csdk', 'stack', 'include'),
    os.path.join(src_dir, 'resource', 'include'),
    os.path.join(src_dir, 'extlibs', 'cjson'),
    os.path.join(src_dir, 'extlibs', 'tinycbor', 'src'),
    os.path.join(src_dir, 'extlibs', 'rapidjson', 'rapidjson', 'include', 'rapidjson')
])
lyric_env.AppendUnique(CPPPATH=[
    os.path.join(bridging_path, 'include'),
    os.path.join(bridging_path, 'plugins', 'lyric_plugin'),
    os.path.join(bridging_path, 'plugins', 'lyric_plugin', 'honeywell_objects')
])

if 'g++' in lyric_env.get('CXX'):
    lyric_env.AppendUnique(
        CXXFLAGS=['-std=c++0x', '-Wall', '-Wextra', '-Werror'])

libmpm = lyric_env.get('BUILD_DIR') + 'libmpmcommon.a'
lyric_env['LINKFLAGS'] = maskFlags(env['LINKFLAGS'])
lyric_env.AppendUnique(LINKFLAGS=['-Wl,--allow-shlib-undefined'])
lyric_env.AppendUnique(LINKFLAGS=[
    '-Wl,--allow-shlib-undefined',
    '-Wl,--whole-archive', libmpm,
    '-Wl,-no-whole-archive'
])

lyric_env.AppendUnique(LIBS=[
    'm', 'octbstack', 'ocsrm', 'connectivity_abstraction', 'coap', 'curl'
])

#####################################################################
# Source files and Target(s)
######################################################################

lyric_src = [
    os.path.join(bridging_path, 'plugins', 'lyric_plugin', 'honeywellResource.cpp'),
    os.path.join(bridging_path, 'plugins', 'lyric_plugin', 'honeywellHelpers.cpp'),
    os.path.join(bridging_path, 'plugins', 'lyric_plugin', 'honeywell_objects', 'honeywellLyric.cpp'),
    os.path.join(bridging_path, 'plugins', 'lyric_plugin', 'honeywell_objects', 'honeywell.cpp'),
    os.path.join(bridging_path, 'plugins', 'lyric_plugin', 'honeywell_objects', 'honeywellThermostat.cpp'),
]

lyric_env.AppendUnique(LYRIC_SRC=lyric_src)
lyriclib = lyric_env.SharedLibrary('lyricplugin', lyric_env.get('LYRIC_SRC'))
lyric_env.Depends(lyriclib, libmpm)
lyric_env.InstallTarget(lyriclib, 'lyricplugin')
lyric_env.UserInstallTargetLib(lyriclib, 'lyricplugin')
